# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- releases/*
- features/*

jobs:
- job: MacOS
  pool: {vmImage: 'macos-10.15'}
  variables:
    ESV_NODE_ARTIFACTS_PATH: '$(Build.SourcesDirectory)/artifacts'
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.7
    - script: |
        mkdir $(ESV_NODE_ARTIFACTS_PATH)
        python3 -m pip install -U wheel
        python3 setup.py build bdist_wheel --plat-name macos-10.15-x86_64
        cp dist/* $(ESV_NODE_ARTIFACTS_PATH)/
      displayName: Build Bitcoin SV (autotools) / Python packaging
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: '$(ESV_NODE_ARTIFACTS_PATH)'}

# - job: Windows
#   pool: {vmImage: 'windows-latest'}
#   variables:
#     vcpkgVersion: 2020.06.15
#     vcpkgInstallParamFile: '$(Build.SourcesDirectory)/.azure-pipelines/vcpkg/x64-windows-static.txt'
#     vcpkgBinariesPath: 'C:\Users\VssAdministrator\AppData\Local\vcpkg\archives'
#   steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: 3.7
#     - task: Cache@2
#       displayName: Cache vcpkg
#       inputs:
#         key: $(vcpkgInstallParamFile) | "$(vcpkgVersion)" | "$(Agent.OS)"
#         path: '$(vcpkgBinariesPath)'
#     - script: |
#         py -3 -m pip install -U wheel
#         py -3 setup.py build bdist_wheel --plat-name win-amd64
#         copy dist\* artifacts\
#     - task: PublishBuildArtifacts@1
#       inputs: {pathtoPublish: 'dist'}
